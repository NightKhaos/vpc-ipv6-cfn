# vim: ft=yaml
---
AWSTemplateFormatVersion: "2010-09-09"
Description: "Cloud Formation Template to create a sample VPC environment with 3 public and private subnets (except where only 2 AZs exist)"
Conditions:
    ThreeAZs:
        "Fn::Not":
            - "Fn::Or":
                - "Fn::Equals":
                    - !Ref AWS::Region
                    - "eu-central-1"
                - "Fn::Equals":
                    - !Ref AWS::Region
                    - "ap-south-1"
                - "Fn::Equals":
                    - !Ref AWS::Region
                    - "ap-southeast-1"
                - "Fn::Equals":
                    - !Ref AWS::Region
                    - "ap-northeast-1"
                - "Fn::Equals":
                    - !Ref AWS::Region
                    - "ap-northeast-2"
                - "Fn::Equals":
                    - !Ref AWS::Region
                    - "ca-central-1"
                - "Fn::Equals":
                    - !Ref AWS::Region
                    - "us-west-2"
Parameters:
    CidrBlock:
        Type: "String"
        Description: "The CIDR to create the VPC under."
        Default: "10.0.0.0/16"
        MaxLength: "18"
        MinLength: "9"
        AllowedPattern: "(\\d{1,3}\\.){3}\\d{1,3}\\/\\d{1,2}"
        ConstraintDescription: "Must be a valid CIDR block in the form x.x.x.x/x"

    PublicSubnetACidr:
        Type: "String"
        Description: "The CIDR to create the public subnet under. Must be a subnetwork of CidrBlock"
        Default: "10.0.2.0/23"
        MaxLength: "18"
        MinLength: "9"
        AllowedPattern: "(\\d{1,3}\\.){3}\\d{1,3}\\/\\d{1,2}"
        ConstraintDescription: "Must be a valid CIDR block in the form x.x.x.x/x"

    PublicSubnetBCidr:
        Type: "String"
        Description: "The CIDR to create the public subnet under. Must be a subnetwork of CidrBlock"
        Default: "10.0.4.0/23"
        MaxLength: "18"
        MinLength: "9"
        AllowedPattern: "(\\d{1,3}\\.){3}\\d{1,3}\\/\\d{1,2}"
        ConstraintDescription: "Must be a valid CIDR block in the form x.x.x.x/x"

    PublicSubnetCCidr:
        Type: "String"
        Description: "The CIDR to create the public subnet under. Must be a subnetwork of CidrBlock. Ignored for eu-central-1, ap-south-1, ap-southeast-1 and ap-northeast-2 regions"
        Default: "10.0.6.0/23"
        MaxLength: "18"
        MinLength: "9"
        AllowedPattern: "(\\d{1,3}\\.){3}\\d{1,3}\\/\\d{1,2}"
        ConstraintDescription: "Must be a valid CIDR block in the form x.x.x.x/x"
    
    PrivateSubnetACidr:
        Type: "String"
        Description: "The CIDR to create the private subnet under. Must be a subnetwork of CidrBlock"
        Default: "10.0.12.0/23"
        MaxLength: "18"
        MinLength: "9"
        AllowedPattern: "(\\d{1,3}\\.){3}\\d{1,3}\\/\\d{1,2}"
        ConstraintDescription: "Must be a valid CIDR block in the form x.x.x.x/x"

    PrivateSubnetBCidr:
        Type: "String"
        Description: "The CIDR to create the private subnet under. Must be a subnetwork of CidrBlock"
        Default: "10.0.14.0/23"
        MaxLength: "18"
        MinLength: "9"
        AllowedPattern: "(\\d{1,3}\\.){3}\\d{1,3}\\/\\d{1,2}"
        ConstraintDescription: "Must be a valid CIDR block in the form x.x.x.x/x"

    PrivateSubnetCCidr:
        Type: "String"
        Description: "The CIDR to create the private subnet under. Must be a subnetwork of CidrBlock. Ignored for eu-central-1, ap-south-1, ap-southeast-1 and ap-northeast-2 regions"
        Default: "10.0.16.0/23"
        MaxLength: "18"
        MinLength: "9"
        AllowedPattern: "(\\d{1,3}\\.){3}\\d{1,3}\\/\\d{1,2}"
        ConstraintDescription: "Must be a valid CIDR block in the form x.x.x.x/x"

Resources:
    VPC:
        Type: "AWS::EC2::VPC"
        Properties:
            CidrBlock: !Ref CidrBlock
            EnableDnsSupport: "true"
            EnableDnsHostnames: "true"
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName}-VPC

    VPCIpv6:
        Type: "AWS::EC2::VPCCidrBlock"
        Properties:
            AmazonProvidedIpv6CidrBlock: true
            VpcId: !Ref VPC

    VPCIpv6Prefix:
        Type: "Custom::VPCCidrBlockPrefix"
        Properties:
            ServiceToken:
                "Fn::ImportValue": !Sub vpc-ipv6-cfn-${AWS::Region}
            VpcAssociationId: !Ref VPCIpv6

    IGW:
        Type: "AWS::EC2::InternetGateway"
    
    GatewayAttachment:
        Type: "AWS::EC2::VPCGatewayAttachment"
        Properties:
            InternetGatewayId: !Ref IGW
            VpcId: !Ref VPC

    PublicRouteTable:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref VPC

    PublicDefaultRoute:
        Type: "AWS::EC2::Route"
        DependsOn: GatewayAttachment
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: "0.0.0.0/0"
            GatewayId: !Ref IGW

    PublicDefaultIpv6Route:
        Type: "AWS::EC2::Route"
        DependsOn:
          - GatewayAttachment
          - VPCIpv6
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationIpv6CidrBlock: "::/0"
            GatewayId: !Ref IGW

    PublicSubnetA:
        Type: "AWS::EC2::Subnet"
        DependsOn: PublicDefaultRoute
        Properties:
            AvailabilityZone: !Select [ 0, !GetAZs '']
            CidrBlock: !Ref PublicSubnetACidr
            MapPublicIpOnLaunch: "true"
            VpcId: !Ref VPC

    PublicSubnetAIpv6:
        Type: "AWS::EC2::SubnetCidrBlock"
        DependsOn: PublicDefaultIpv6Route
        Properties:
            Ipv6CidrBlock:
                "Fn::Join":
                    - ''
                    - - !GetAtt [VPCIpv6Prefix, TruncatedPrefix]
                      - "0a"
                      - "::/64"
            SubnetId: !Ref PublicSubnetA

    PublicSubnetAIpv6OnCreation:
        Type: "Custom::SubnetModifyAssociateIpv6AddressOnCreation"
        DependsOn: PublicSubnetAIpv6
        Properties:
            ServiceToken:
                "Fn::ImportValue": !Sub vpc-ipv6-cfn-${AWS::Region}
            SubnetId: !Ref PublicSubnetA
            AssignIpv6AddressOnCreation: True

    PublicSubnetB:
        Type: "AWS::EC2::Subnet"
        DependsOn: PublicDefaultRoute
        Properties:
            AvailabilityZone: !Select [ 1, !GetAZs '']
            CidrBlock: !Ref PublicSubnetBCidr
            MapPublicIpOnLaunch: "true"
            VpcId: !Ref VPC

    PublicSubnetBIpv6:
        Type: "AWS::EC2::SubnetCidrBlock"
        DependsOn: PublicDefaultIpv6Route
        Properties:
            Ipv6CidrBlock:
                "Fn::Join":
                    - ''
                    - - !GetAtt [VPCIpv6Prefix, TruncatedPrefix]
                      - "0b"
                      - "::/64"
            SubnetId: !Ref PublicSubnetB

    PublicSubnetBIpv6OnCreation:
        Type: "Custom::SubnetModifyAssociateIpv6AddressOnCreation"
        DependsOn: PublicSubnetBIpv6
        Properties:
            ServiceToken:
                "Fn::ImportValue": !Sub vpc-ipv6-cfn-${AWS::Region}
            SubnetId: !Ref PublicSubnetB
            AssignIpv6AddressOnCreation: True

    PublicSubnetC:
        Type: "AWS::EC2::Subnet"
        DependsOn: PublicDefaultRoute
        Condition: ThreeAZs
        Properties:
            AvailabilityZone: !Select [ 2, !GetAZs '']
            CidrBlock: !Ref PublicSubnetCCidr
            MapPublicIpOnLaunch: "true"
            VpcId: !Ref VPC
   
    PublicSubnetCIpv6:
        Type: "AWS::EC2::SubnetCidrBlock"
        DependsOn: PublicDefaultIpv6Route
        Condition: ThreeAZs
        Properties:
            Ipv6CidrBlock:
                "Fn::Join":
                    - ''
                    - - !GetAtt [VPCIpv6Prefix, TruncatedPrefix]
                      - "0c"
                      - "::/64"
            SubnetId: !Ref PublicSubnetC

    PublicSubnetCIpv6OnCreation:
        Type: "Custom::SubnetModifyAssociateIpv6AddressOnCreation"
        DependsOn: PublicSubnetCIpv6
        Condition: ThreeAZs
        Properties:
            ServiceToken:
                "Fn::ImportValue": !Sub vpc-ipv6-cfn-${AWS::Region}
            SubnetId: !Ref PublicSubnetC
            AssignIpv6AddressOnCreation: True

    PublicSubnetARouteTable:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        DependsOn: 
          - PublicDefaultRoute
          - PublicDefaultIpv6Route
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnetA

    PublicSubnetBRouteTable:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        DependsOn:
          - PublicDefaultRoute
          - PublicDefaultIpv6Route
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnetB

    PublicSubnetCRouteTable:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        DependsOn:
          - PublicDefaultRoute
          - PublicDefaultIpv6Route
        Condition: ThreeAZs
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnetC

    NATEIPA:
        Type: "AWS::EC2::EIP"
        Properties:    
            Domain: "vpc"

    NATEIPB:
        Type: "AWS::EC2::EIP"
        Properties:
            Domain: "vpc"

    NATEIPC:
        Type: "AWS::EC2::EIP"
        Condition: ThreeAZs
        Properties:
            Domain: "vpc"

    NATGatewayA:
        Type: "AWS::EC2::NatGateway"
        DependsOn: PublicSubnetARouteTable
        Properties:
            AllocationId: !GetAtt [ "NATEIPA", "AllocationId" ]
            SubnetId: !Ref PublicSubnetA

    NATGatewayB:
        Type: "AWS::EC2::NatGateway"
        DependsOn: PublicSubnetBRouteTable
        Properties:
            AllocationId: !GetAtt [ "NATEIPB", "AllocationId" ]
            SubnetId: !Ref PublicSubnetB

    NATGatewayC:
        Type: "AWS::EC2::NatGateway"
        DependsOn: PublicSubnetCRouteTable
        Condition: ThreeAZs
        Properties:
            AllocationId: !GetAtt [ "NATEIPC", "AllocationId" ]
            SubnetId: !Ref PublicSubnetC

    Ipv6EgressOnlyGateway:
        Type: "Custom::EgressOnlyGateway"
        Properties:
            ServiceToken:
                "Fn::ImportValue": !Sub vpc-ipv6-cfn-${AWS::Region}
            VpcId: !Ref VPC 

    PrivateRouteTableA:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref VPC

    PrivateRouteTableB:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref VPC

    PrivateRouteTableC:
        Type: "AWS::EC2::RouteTable"
        Condition: ThreeAZs
        Properties:
            VpcId: !Ref VPC

    PrivateDefaultRouteA:
        Type: "AWS::EC2::Route"
        Properties:
            RouteTableId: !Ref PrivateRouteTableA
            DestinationCidrBlock: "0.0.0.0/0"
            NatGatewayId: !Ref NATGatewayA

    PrivateDefaultIpv6RouteA:
        Type: "Custom::EgressOnlyGatewayRoute"
        Properties:
            ServiceToken:
                "Fn::ImportValue": !Sub vpc-ipv6-cfn-${AWS::Region}
            RouteTableId: !Ref PrivateRouteTableA
            DestinationIpv6CidrBlock: "::/0"
            EgressOnlyInternetGatewayId: !GetAtt [Ipv6EgressOnlyGateway, EgressOnlyGatewayId]

    PrivateDefaultRouteB:
        Type: "AWS::EC2::Route"
        Properties:
            RouteTableId: !Ref PrivateRouteTableB
            DestinationCidrBlock: "0.0.0.0/0"
            NatGatewayId: !Ref NATGatewayB
    
    PrivateDefaultIpv6RouteB:
        Type: "Custom::EgressOnlyGatewayRoute"
        Properties:
            ServiceToken:
                "Fn::ImportValue": !Sub vpc-ipv6-cfn-${AWS::Region}
            RouteTableId: !Ref PrivateRouteTableB
            DestinationIpv6CidrBlock: "::/0"
            EgressOnlyInternetGatewayId: !GetAtt [Ipv6EgressOnlyGateway, EgressOnlyGatewayId]

    PrivateDefaultRouteC:
        Type: "AWS::EC2::Route"
        Condition: ThreeAZs
        Properties:
            RouteTableId: !Ref PrivateRouteTableC
            DestinationCidrBlock: "0.0.0.0/0"
            NatGatewayId: !Ref NATGatewayC

    PrivateDefaultIpv6RouteC:
        Type: "Custom::EgressOnlyGatewayRoute"
        Condition: ThreeAZs
        Properties:
            ServiceToken:
                "Fn::ImportValue": !Sub vpc-ipv6-cfn-${AWS::Region}
            RouteTableId: !Ref PrivateRouteTableC
            DestinationIpv6CidrBlock: "::/0"
            EgressOnlyInternetGatewayId: !GetAtt [Ipv6EgressOnlyGateway, EgressOnlyGatewayId]
    
    PrivateSubnetA:
        Type: "AWS::EC2::Subnet"
        DependsOn: PrivateDefaultRouteA
        Properties:
            AvailabilityZone: !Select [ 0, !GetAZs '']
            CidrBlock: !Ref PrivateSubnetACidr
            VpcId: !Ref VPC

    PrivateSubnetAIpv6:
        Type: "AWS::EC2::SubnetCidrBlock"
        DependsOn: PrivateDefaultIpv6RouteA
        Properties:
            Ipv6CidrBlock:
                "Fn::Join":
                    - ''
                    - - !GetAtt [VPCIpv6Prefix, TruncatedPrefix]
                      - "1a"
                      - "::/64"
            SubnetId: !Ref PrivateSubnetA
    
    PrivateSubnetAIpv6OnCreation:
        Type: "Custom::SubnetModifyAssociateIpv6AddressOnCreation"
        DependsOn: PrivateSubnetAIpv6
        Properties:
            ServiceToken:
                "Fn::ImportValue": !Sub vpc-ipv6-cfn-${AWS::Region}
            SubnetId: !Ref PrivateSubnetA
            AssignIpv6AddressOnCreation: True

    PrivateSubnetB:
        Type: "AWS::EC2::Subnet"
        DependsOn: PrivateDefaultRouteB
        Properties:
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnetBCidr
            VpcId: !Ref VPC

    PrivateSubnetBIpv6:
        Type: "AWS::EC2::SubnetCidrBlock"
        DependsOn: PrivateDefaultIpv6RouteB
        Properties:
            Ipv6CidrBlock:
                "Fn::Join":
                    - ''
                    - - !GetAtt [VPCIpv6Prefix, TruncatedPrefix]
                      - "1b"
                      - "::/64"
            SubnetId: !Ref PrivateSubnetB
    
    PrivateSubnetBIpv6OnCreation:
        Type: "Custom::SubnetModifyAssociateIpv6AddressOnCreation"
        DependsOn: PrivateSubnetBIpv6
        Properties:
            ServiceToken:
                "Fn::ImportValue": !Sub vpc-ipv6-cfn-${AWS::Region}
            SubnetId: !Ref PrivateSubnetB
            AssignIpv6AddressOnCreation: True

    PrivateSubnetC:
        Type: "AWS::EC2::Subnet"
        DependsOn: PrivateDefaultRouteC
        Condition: ThreeAZs
        Properties:
            AvailabilityZone: !Select [ 2, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnetCCidr
            VpcId: !Ref VPC

    PrivateSubnetCIpv6:
        Type: "AWS::EC2::SubnetCidrBlock"
        DependsOn: PrivateDefaultIpv6RouteC
        Condition: ThreeAZs
        Properties:
            Ipv6CidrBlock:
                "Fn::Join":
                    - ''
                    - - !GetAtt [VPCIpv6Prefix, TruncatedPrefix]
                      - "1c"
                      - "::/64"
            SubnetId: !Ref PrivateSubnetC

    PrivateSubnetCIpv6OnCreation:
        Type: "Custom::SubnetModifyAssociateIpv6AddressOnCreation"
        DependsOn: PrivateSubnetCIpv6
        Condition: ThreeAZs
        Properties:
            ServiceToken:
                "Fn::ImportValue": !Sub vpc-ipv6-cfn-${AWS::Region}
            SubnetId: !Ref PrivateSubnetC
            AssignIpv6AddressOnCreation: True

    PrivateSubnetARouteTable:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        DependsOn: PrivateDefaultRouteA
        Properties:
            RouteTableId: !Ref PrivateRouteTableA
            SubnetId: !Ref PrivateSubnetA

    PrivateSubnetBRouteTable:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        DependsOn: PrivateDefaultRouteB
        Properties:
            RouteTableId: !Ref PrivateRouteTableB
            SubnetId: !Ref PrivateSubnetB

    PrivateSubnetCRouteTable:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        DependsOn: PrivateDefaultRouteC
        Condition: ThreeAZs
        Properties:
            RouteTableId: !Ref PrivateRouteTableC
            SubnetId: !Ref PrivateSubnetC

Outputs:
    Testing1:
        Value: !GetAtt [VPCIpv6Prefix, Prefix]
    Testing2:
        Value: !GetAtt [VPCIpv6Prefix, PrefixLength]
    Testing3:
        Value: !GetAtt [VPCIpv6Prefix, TruncatedPrefix]
